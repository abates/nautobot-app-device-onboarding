---
sync_devices:
  hostname:
    commands:
      - command: "show version"
        parser: "textfsm"
        jpath: "[*].hostname"
  serial:
    commands:
      - command: "show inventory"
        parser: "textfsm"
        jpath: "[?name=='Chassis'].sn"
  device_type:
    commands:
      - command: "show version"
        parser: "textfsm"
        jpath: "[*].platform"
  mgmt_interface:
    commands:
      - command: "show ip interface vrf all"
        parser: "textfsm"
        jpath: "[?ip_address=='{{ obj }}'].interface || [`mgmt0`]"
  mask_length:
    commands:
      - command: "show ip interface vrf all"
        parser: "textfsm"
        jpath: "[?ip_address=='{{ obj }}'].subnet"
        post_processor: "{% if '/' in obj[0] %}{{ obj[0].split('/')[1] }}{% else %}31{% endif %}"
sync_network_data:
  serial:
    commands:
      command: "show inventory"
      parser: "textfsm"
      jpath: "[?name=='Chassis'].sn"
  interfaces:
    root_key: true
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[*].interface"  # when root_key=true this extracted value is what becomes interable in keys using __ under `current_key`.
        post_processor: "{% set result={} %}{% for interface in obj %}{{ result.update({interface: {}}) or '' }}{% endfor %}{{ result | tojson }}"
  interfaces__type:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].hardware_type"
  interfaces__ip_addresses:
    commands:
      - command: "show ip interface vrf all"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].{ip_address: ip_address, prefix_length: subnet}"
        iterable_type: "list"
  # interfaces__ip_addresses__ip_address:
  #   commands:
  #     - command: "show ip interface vrf all"
  #       parser: "textfsm"
  #       jpath: "[*].{interface: interface, ip_address: ip_address}"
  # interfaces__ip_addresses__prefix_length:
  #   commands:
  #     - command: "show ip interface vrf all"
  #       parser: "textfsm"
  #       jpath: "[*].{interface: interface, prefix_length: subnet}"
  interfaces__mtu:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].mtu"
  interfaces__mac_address:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].mac_address"
  interfaces__description:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].description"
  interfaces__link_status:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].link_status"
  interfaces__mode:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].mode"
  interfaces__vrf:
    commands:
      - command: "show vrf interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].{name:name}"
        iterable_type: "dict"
  # vlans:
  #   commands:
  #     - command: "show vlan"
  #       parser: "textfsm"
  #       jpath: "[*].{interfaces: interfaces, vlan_name: vlan_name, vlan_id: vlan_id, status: status}"
  # interface_vlans:
  #   commands:
  #     - command: "show interface switchport"
  #       parser: "textfsm"
  #       jpath: "[*].{interface: interface, mode:mode, access_vlan: access_vlan, access_vlan_name: access_vlan_name, native_vlan: native_vlan, trunking_vlans: trunking_vlans, voice_vlan: voice_vlan}"
